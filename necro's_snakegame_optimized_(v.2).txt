@name 
@inputs 
@outputs 
@persist [Board,Back]:entity [Score,Direction,MaxPosition,MoveSize,SnakeSize,Break,Counter]:number [Food,Snake]:array [NewPos]:vector
@trigger 

# Not possible due to tickrate on exhib...

if(first()){
    
    #Stuff
    MoveSize = 11.375
    MaxPosition = 45.5
    
    function void spawnSnake(){
        SnakeSize = 1
        StartPos = vec(-MaxPosition+MoveSize*randint(3,5),-MaxPosition+MoveSize*randint(3,5),1)
        for(I=1,SnakeSize){
            holoCreate(I,
            Board:pos()+Board:boxCenter()+Board:toWorldAxis(StartPos),
            vec(0.9,0.1,0.9),
            ang(),
            vec(0,255,0)
            )
            holoDisableShading(I,1)
            Snake[I,vector] = StartPos
        }
        Direction = 2
    }
    
    function void moveFood(){
        Food[2,vector] = vec(-MaxPosition+MoveSize*randint(1,7),-MaxPosition+MoveSize*randint(1,7),0.8)
        Food[1,entity] = holoCreate(994,
        Board:pos()+Board:boxCenter()+Board:toWorldAxis(Food[2,vector]),
        vec(0.3,0.1,0.3),
        ang(),
        vec(255,255,0))
        holoDisableShading(994,1)
    }
    
    timer("Initilize Holograms",100)
    
}elseif(clk("Initilize Holograms")){
    
    # Board size = 25 * 25
    Board = holoCreate(999,
    entity():pos()+vec(0,0,50),
    vec(8,8,0.2),
    ang(0,0,90),
    vec(50))
    holoDisableShading(999,1)
    
    # Board frame
    local Red=vec(255,0,0)
    holoCreate(998,
    Board:pos()+Board:boxCenter()+Board:toWorldAxis(vec(48,0,0)),
    vec(0.1,0.26,8.1),
    ang(),
    Red)
    holoDisableShading(998,1)
    
    holoCreate(997,
    Board:pos()+Board:boxCenter()+Board:toWorldAxis(vec(-48,0,0)),
    vec(0.1,0.26,8.1),
    ang(),
    Red)
    holoDisableShading(997,1)
    
    holoCreate(996,
    Board:pos()+Board:boxCenter()+Board:toWorldAxis(vec(0,48,0)),
    vec(8.1,0.26,0.1),
    ang(),
    Red)
    holoDisableShading(996,1)
    
    holoCreate(995,
    Board:pos()+Board:boxCenter()+Board:toWorldAxis(vec(0,-48,0)),
    vec(8.1,0.26,0.1),
    ang(),
    Red)
    holoDisableShading(995,1)
    timer("BootUp",100)
}elseif(clk("BootUp")){
    # Snake
    spawnSnake()
    moveFood()
    timer("gameTick",1000)
    timer("spawnBack",500)
}elseif(clk("gameTick")){
    # Snake Control
    if(owner():keyUse()){
        Dif = owner():aimPos()-holoEntity(1):pos()
        if(abs(Dif:z()) > abs(Dif:x())){
            if(Dif:z() > 0){
                if(Direction != 3){
                    Direction = 1
                }
            }else{
                if(Direction != 1){
                    Direction = 3
                }
            }
        }else{
            if(Dif:x() > 0){
                if(Direction != 4){
                    Direction = 2
                }
            }else{
                if(Direction != 2){
                    Direction = 4
                }
            }
        }
    }
    
    # Snake Direction
        Break = 0
        NewPos = vec(0)
        if(Direction == 1){
            NewPos = Snake[1,vector]+vec(0,MoveSize,0)
            if(NewPos:y() >= MaxPosition){
                Break = 1
            }
        }elseif(Direction == 2){
            NewPos = Snake[1,vector]+vec(MoveSize,0,0)
            if(NewPos:x() >= MaxPosition){
                Break = 1
            }
        }elseif(Direction == 3){
            NewPos = Snake[1,vector]-vec(0,MoveSize,0)
            if(NewPos:y() <= -MaxPosition){
                Break = 1
            }
        }elseif(Direction == 4){
            NewPos = Snake[1,vector]-vec(MoveSize,0,0)
            if(NewPos:x() <= -MaxPosition){
                Break = 1
            }
        }
        
        #Food checks
        timer("Food checks",1)
        
        #Snake move
        #timer("Snake move",20)
        
        #Snake Crash check
        #timer("Snake Crash check",30)
        
        #Game end stuff
        #timer("Game end stuff",40)
        
        
}elseif(clk("reset")){
    if(Back:isValid()){
        Back:propDelete()
    }
    reset()
}elseif(clk("spawnBack")){
    Back = propSpawn("models/hunter/plates/plate2x2.mdl",entity():pos()+vec(0,0,50),ang(0,0,90),1)
    Back:setAlpha(0)
}elseif(clk("Food checks")){
    if(Food[1,entity]){
        if(Snake[1,vector]:distance(Food[2,vector])<5){
            soundPlay(1,3,"buttons/button3.wav")
            holoDelete(994)
            Score = Score + 10
            Counter=1
            timer("AddLength",1)
        }else{
            Counter=SnakeSize
            timer("Snake move",1)
        }
    }else{
        moveFood()
        Counter=SnakeSize
        timer("Snake move",1)
    }
        
    Score = Score + 2
}elseif(clk("Snake move")){
    if(Counter > 1){
        holoPos(Counter,Board:pos()+Board:boxCenter()+Board:toWorldAxis(Snake[Counter-1,vector]))
        Snake[Counter,vector] = Snake[Counter-1,vector]
        Counter--
        timer("Snake move",1)
    }else{
        timer("Snake move 2.0",1)
    }
}elseif(clk("Snake move 2.0")){
    holoPos(1,Board:pos()+Board:boxCenter()+Board:toWorldAxis(NewPos))
    Snake[1,vector] = NewPos
    Counter=1
    timer("Snake Crash check",1)
}elseif(clk("Snake Crash check")){
    if(Counter<=Snake:count()){
        V=Snake[Counter,vector]
        if(V:distance(Snake[1,vector])<5){
            if(Counter!=1){
                Break = 1
            }
        }
        Counter++
        timer("Snake Crash check",1)
    }else{
        timer("Game end stuff",1)
    }
}elseif(clk("Game end stuff")){
    if(!Break){
        timer("gameTick",100)
    }else{
        soundPlay(1,3,"buttons/button10.wav")
        timer("reset",2000)
    }
}elseif(clk("AddLength")){
    local I=Counter+SnakeSize
    if(Counter<=2){
        if(Counter%2==0){
            I=I-1
        }
        holoCreate(I,
        Board:pos()+Board:boxCenter()+Board:toWorldAxis(Snake[I-1,vector]),
        vec(0.9,0.1,0.9),
        ang(),
        vec(0,200,0))
        holoDisableShading(I,1)
        Snake[I,vector] = Snake[SnakeSize,vector]
        SnakeSize=SnakeSize+1
        Counter++
        timer("AddLength",1)
    }else{
        Counter=1
        timer("Food checks",1)
    }
}
