@name 3d Paint Brush
@persist [N,Counter,Speed,SavedID,SavingAllowed] [SaveList,DeleteList]:array [SelectingT,UndoLists,PointATable,PointBTable,Materials,Colors,Models,Width]:table [TempString]:string [SavedGT]:gtable
if(first()){
    #ifdef noDuplications()
    noDuplications()
    #endif
    SavedGT=gTable(owner():steamID()+"'s LocalSaves",1)
    SavedGT["Pie",array]=array()
    
    N=1
    SavingAllowed=0
    Speed=100
    Max=10
    local Oid=owner():id()+500
    PointATable=table()
    PointBTable=table()
    UndoLists=table()
    SelectingT=table()
    Materials=table()
    Models=table()
    Width=table()
    Colors=table()
    Models=table()
    Width[Oid,number]=1
    Colors[Oid,vector]=vec(255)
    Models[Oid,string]="models/hunter/plates/plate8x8.mdl"
    function void measureTape(Index, ID) {
        local Target=PointBTable[ID,vector]
        local EyePos=PointATable[ID,vector]
        local H=holoCreate(Index,EyePos,vec(0.1),ang(),Colors[ID,vector],Models[ID,string])
        holoMaterial(Index,Materials[ID,string])
        holoScaleUnits(Index,vec(EyePos:distance(Target),Width[ID,number],Width[ID,number]))
        holoAng(Index,-1*H:heading(Target))
        holoDisableShading(Index,1)
        holoPos(Index,EyePos-((EyePos-Target)/2))
        holoParent(Index,entity())
        #print(abs(Target-EyePos))
        #print(holoEntity(Index):pos())
    }
    #runOnKey(1)
    runOnKeys(owner(),1)
}elseif(clk("PrintNextHologram")){
    Counter++
    local HN=SaveList:popNumber()
    local HE=holoEntity(HN)
    if(!(HE:pos()==vec())){
        local OutText=""
        local PC=Counter%20
        if(PC==1){
            OutText+="if(Chunk=="+(Counter-1)/20+"){ "
        }
        OutText+="if(clk(\""+Counter+"\")){ "
        local Pos=round(HE:pos(),2)
        local Ang=round(HE:angles(),2)
        local Color=HE:getColor()
        local Scale=round(holoScaleUnits(HN),2)
        
        local SPos=Pos:x()+","+Pos:y()+","+Pos:z()
        local SColor=Color:x()+","+Color:y()+","+Color:z()
        local SAng=Ang:pitch()+","+Ang:yaw()+","+Ang:roll()
        local SScale=Scale:x()+","+Scale:y()+","+Scale:z()
        
        OutText+="holoCreate("+Counter+",vec("+SPos+"),vec(0.1),ang("+SAng+"),vec("+SColor+"),\""+HE:model()+"\") "
        OutText+="holoScaleUnits("+Counter+",vec("+SScale+")) "
        OutText+="holoMaterial("+Counter+",\""+HE:getMaterial()+"\") "
        OutText+="timer(\""+(Counter+1)+"\",Speed) "
        if(PC==0){
            OutText+="Chunk++ }"
        }
        OutText+="}"
        if(SaveList:count()>0){
            timer("PrintNextHologram",1000)
        }else {
            OutText+="}"
            SavedGT["Pie",array]:pushString(OutText)
            print("Finished")
        }
        SavedGT["Pie",array]:pushString(OutText)
    }else{
        Counter--
        timer("PrintNextHologram",0)
    }
}elseif(keyClk(keyClk())==-1){
    local ID=keyClk():id()+500
    switch(keyClkPressed()){
        case "f",
            local ID=owner():id()+500
            if(SelectingT[ID,number] && !owner():isTyping()){
                SelectingT[ID,number]=0
                N++
                if(UndoLists[ID,array]:count()==0){
                    UndoLists[ID,array]=array()
                }
                UndoLists[ID,array]:pushNumber(N)
                PointBTable[ID,vector]=owner():aimPos()
                measureTape(N,ID)
                holoDelete(ID)
            }else{
                PointATable[ID,vector]=owner():aimPos()
                holoCreate(ID,PointATable[ID,vector],vec(0.1),ang(),vec(255),"models/XQM/Rails/trackball_1.mdl")
                SelectingT[ID,number]=1
            }
        case "g",
            if(SelectingT[ID,number] && !keyClk():isTyping()){
                SelectingT[ID,number]=0
                N++
                if(UndoLists[ID,array]:count()==0){
                    UndoLists[ID,array]=array()
                }
                UndoLists[ID,array]:pushNumber(N)
                PointBTable[ID,vector]=keyClk():aimPos()
                measureTape(N,ID)
                holoDelete(ID)
            }else{
                PointATable[ID,vector]=keyClk():aimPos()
                holoCreate(ID,PointATable[ID,vector],vec(0.1),ang(),vec(255),"models/XQM/Rails/trackball_1.mdl")
                SelectingT[ID,number]=1
            }
            break
        case "o",
            if(keyClk()==owner()){
                local E=keyClk():aimEntity()
                if(E:isPlayer()){
                    E["IsDrawing?",number]=!E["IsDrawing?",number]
                    runOnKeys(E,E["IsDrawing?",number])
                    if(E["IsDrawing?",number]){
                        print("You Passed On The Brush to: "+ E:name())
                        if(!E["FirstSpawn",number]){
                            local EID=E:id()+500
                            Colors[EID,vector]=vec(255)
                            Models[EID,string]="models/hunter/plates/plate8x8.mdl"
                            Width[EID,number]=1
                            E["FirstSpawn",number]=1
                        }
                    }else{
                        print("You Have Taken The Brush From: "+E:name())
                        if(SavingAllowed){
                            SavedID=E:id()+500
                            timer("DeleteHologram",10)
                        }
                    }
                }
            }
            break
        case "backspace",
            if(!keyClk():isTyping()){
                holoDelete(UndoLists[ID,array]:popNumber())
            }
            break
        case "i",
            if(!keyClk():isTyping()){
                if(keyClk()==owner()){
                    SavingAllowed=!SavingAllowed
                    print("Saving Mode Has Been Set to: "+SavingAllowed)
                }
            }
            break
        case "p",
            if(!keyClk():isTyping() && SavingAllowed){
                SavedID=ID
                timer("BeginSaving",0)
            }
            break
        case "h",
            if(!keyClk():isTyping()){
                local Ent=keyClk():aimEntity()
                if(Ent:isValid()){
                    Materials[ID,string]=Ent:getMaterial()
                }
            }
            break
        case "j",
            if(!keyClk():isTyping()){
                local Ent=keyClk():aimEntity()
                if(Ent:isValid()){
                    Colors[ID,vector]=Ent:getColor()
                }
            }
            break
        case "k",
            if(!keyClk():isTyping()){
                local Ent=keyClk():aimEntity()
                if(Ent:isValid()){
                    Models[ID,string]=Ent:model()
                }
            }
            break
        case "n",
            if(!keyClk():isTyping()){
                if((Width[ID,number]>1)){
                    Width[ID,number]=Width[ID,number]-1
                }
            }
            break
        case "m",
            if(!keyClk():isTyping()){
                if(keyClk()==owner()){
                    Width[ID,number]=Width[ID,number]+1
                }else{
                    if(!(Width[ID,number]>Max)){
                        Width[ID,number]=Width[ID,number]+1
                    }
                }
            }
            break
            
        default,
            exit()
            break
    }
}elseif(clk("BeginSaving")){
    SaveList=UndoLists[SavedID,array]:clone()
    SavingAllowed=!SavingAllowed
    Counter=0
    SavedGT["Pie",array]=array()
    if(SaveList:count()>0){
        timer("PrintNextHologram",1000)
        print("Saving Please Wait...")
    }
}elseif(clk("BeginDeleting")){
    DeleteList=UndoLists[SavedID,array]:clone()
    SavingAllowed=!SavingAllowed
    if(DeleteList:count()>0){
        timer("DeleteHologram",10)
        print("Deleting Please Wait...")
    }
    PointATable:removeVector(SavedID)
    PointBTable:removeVector(SavedID)
    UndoLists[SavedID,array]:clear()
    SelectingT[SavedID,number]=0
    Materials:removeString(SavedID)
    Colors:removeVector(SavedID)
}elseif(clk("DeleteHologram")){
    local HN=SaveList:popNumber()
    holoDelete(HN)
    if(DeleteList:count()>0){
        timer("DeleteHologram",10)
    }
}
#[
if(clKeyPress(16)){
    local ID=owner():id()+500
    if(SelectingT[ID,number] && !owner():isTyping()){
        SelectingT[ID,number]=0
        N++
        if(UndoLists[ID,array]:count()==0){
            UndoLists[ID,array]=array()
        }
        UndoLists[ID,array]:pushNumber(N)
        PointBTable[ID,vector]=owner():aimPos()
        measureTape(N,ID)
        holoDelete(ID)
    }else{
        PointATable[ID,vector]=owner():aimPos()
        holoCreate(ID,PointATable[ID,vector],vec(0.1),ang(),vec(255),"models/XQM/Rails/trackball_1.mdl")
        SelectingT[ID,number]=1
    }
}
]#
