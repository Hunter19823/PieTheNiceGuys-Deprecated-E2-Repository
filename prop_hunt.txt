@name Prop Hunt
@persist [Props,WhoIsProp,Temporary]:array [PropSizes,Reference]:table [Top,Bottom]:vector
if(first()){
    Top=vec(15615.840820312,15999.809570312,16000)
    Bottom=vec(-745.15057373047,-361.64135742188,13000)
    Props=array(
    "models/props_wasteland/controlroom_chair001a.mdl",
    "models/props_junk/TrafficCone001a.mdl",
    "models/props_junk/TrashBin01a.mdl",
    "models/props_combine/breendesk.mdl",
    "models/props_junk/gascan001a.mdl",
    "models/props_c17/FurnitureDresser001a.mdl",
    "models/props_junk/propane_tank001a.mdl",
    "models/props_borealis/bluebarrel001.mdl",
    "models/props_interiors/pot02a.mdl",
    "models/props_c17/door01_left.mdl",
    "models/props_c17/BriefCase001a.mdl",
    "models/props_lab/monitor01a.mdl",
    "models/props_junk/GlassBottle01a.mdl",
    "models/props_c17/FurnitureSink001a.mdl",
    "models/Gibs/HGIBS.mdl",
    "models/props_c17/FurnitureWashingmachine001a.mdl",
    "models/props_trainstation/trainstation_clock001.mdl",
    "models/props_junk/watermelon01.mdl",
    "models/props_interiors/VendingMachineSoda01a.mdl",
    "models/props_c17/doll01.mdl",
    "models/props_junk/PopCan01a.mdl",
    "models/props_lab/binderredlabel.mdl",
    "models/props_junk/bicycle01a.mdl",
    "models/props_interiors/BathTub01a.mdl",
    "models/props_junk/meathook001a.mdl"
    )
    PropSizes=table(
    "models/props_wasteland/controlroom_chair001a.mdl"=vec(0,0,20),
    "models/props_junk/TrafficCone001a.mdl"=vec(0,0,15),
    "models/props_junk/TrashBin01a.mdl"=vec(0,0,20),
    "models/props_combine/breendesk.mdl"=vec(),
    "models/props_junk/gascan001a.mdl"=vec(0,0,15),
    "models/props_c17/FurnitureDresser001a.mdl"=vec(0,0,40.9),
    "models/props_junk/propane_tank001a.mdl"=vec(0,0,18.3),
    "models/props_borealis/bluebarrel001.mdl"=vec(0,0,25.965),
    "models/props_interiors/pot02a.mdl"=vec(0,0,2.9),
    "models/props_c17/door01_left.mdl"=vec(0,16,54.25),
    "models/props_c17/BriefCase001a.mdl"=vec(0,0,8.77),
    "models/props_lab/monitor01a.mdl"=vec(0,0,13.37),
    "models/props_junk/GlassBottle01a.mdl"=vec(0,0,6.77),
    "models/props_c17/FurnitureSink001a.mdl"=vec(0,0,22.55),
    "models/Gibs/HGIBS.mdl"=vec(0,0,3.365),
    "models/props_c17/FurnitureWashingmachine001a.mdl"=vec(0,0,22.2),
    "models/props_trainstation/trainstation_clock001.mdl"=vec(0,0,32.28125),
    "models/props_junk/watermelon01.mdl"=vec(0,0,7.83),
    "models/props_interiors/VendingMachineSoda01a.mdl"=vec(0,0,48.29),
    "models/props_c17/doll01.mdl"=vec(0,0,8.4),
    "models/props_junk/PopCan01a.mdl"=vec(0,0,3.68),
    "models/props_lab/binderredlabel.mdl"=vec(),
    "models/props_junk/bicycle01a.mdl"=vec(0,0,22.28),
    "models/props_interiors/BathTub01a.mdl"=vec(0,0,9.64),
    "models/props_junk/meathook001a.mdl"=vec(0,0,22.2)
    )
    WhoIsProp=array()
    function void becomeModel(Model:string){
        if(owner():isAdmin()){
                Person=lastSpoke()
                Person:set("setModelScale","0")
                if(Person["ID",number]==0){
                    R=random(1,99999)
                }else{
                    R=Person["ID",number]
                }
                Pos=Person:toWorld(PropSizes[Model,vector])
                #print(PropSizes[Model,vector])
                holoCreate(R,Pos,vec(1),Person:angles(),vec(255),Model)
                holoParent(R,Person)
                Person["ID",number]=R
            }else{
                Person=lastSpoke()
                Person:setFire("setModelScale","0",1)
                if(Person["ID",number]==0){
                    R=random(1,99999)
                }else{
                    R=Person["ID",number]
                }
                #print(PropSizes[Model,vector])
                Pos=Person:toWorld(PropSizes[Model,vector])
                holoCreate(R,Pos,vec(1),Person:angles(),vec(255),Model)
                holoParent(R,Person)
                Person["ID",number]=R
            }
    }
    timer("Refill",1000)
    runOnChat(1)
}elseif(chatClk(lastSpoke())){
    LS=lastSaid():explode(" ")
    Person=lastSpoke()
    switch(LS[1,string]){
        case ".random",
            Boundary=inrange(Person:pos(),Bottom,Top)
            if(Boundary){
                Model=Props[ceil(random(Props:count())),string]
                becomeModel(Model)
                WhoIsProp:pushString(Person:steamID())
            }
            break
        case ".test",
            Boundary=inrange(Person:pos(),Bottom,Top)
            if(Boundary){
                becomeModel(LS[2,string])
                WhoIsProp:pushString(Person:steamID())
            }
            break
        case ".reverse",
            if(owner():isAdmin()){
                if(Person["ID",number]!=0){
                    holoDelete(Person["ID",number])
                    Person:set("setModelScale","1")
                }
            }else{
                if(Person["ID",number]!=0){
                    holoDelete(Person["ID",number])
                    Person:setFire("setModelScale","1",1)
                }
            }
            break
        case ".add",
            Props:pushString(LS[2,string])
            break
        case ".rotate",
            Boundary=inrange(Person:pos(),Bottom,Top)
            if(Boundary){
                Person=lastSpoke()
                if(Person["ID",number]!=0){
                    R=Person["ID",number]
                    holoAng(R,holoEntity(R):toWorld(ang(0,90,0)))
                }
            }
            break
    }
}elseif(clk("Refill")){
    Temporary=array():add(WhoIsProp)
    Reference=invert(WhoIsProp)
    timer("CheckList",5000)
}elseif(clk("CheckList")){
    if(Temporary:count()>0){
        while(perf(90)&Temporary:count()>0){
            ID=Temporary:popString()
            Player=findPlayerBySteamID(ID)
            Boundary=inrange(Player:pos(),Bottom,Top)
            if(!Boundary){
                WhoIsProp:remove(Reference[ID,number])
                if(owner():isAdmin()){
                    if(Player["ID",number]!=0){
                        holoDelete(Player["ID",number])
                        Player:set("setModelScale","1")
                    }
                }else{
                    if(Player["ID",number]!=0){
                        holoDelete(Player["ID",number])
                        Player:setFire("setModelScale","1",1)
                    }
                }
            }
        }
        timer("CheckList",0)
    }else{
        timer("Refill",0)
    }
}
