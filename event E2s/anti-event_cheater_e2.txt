@name Anti-Event Cheater E2
@persist [EC,TR,BL]:entity [Players,SpawnPos]:array [BlackListed]:string [WhiteListed]:string
if(first() && owner():isAdmin()){
    Stage=1
    SpawnPos=array(
    vec(797.91 , -873.75 , 9.64),
    vec(1146.9 , -876.24 , 33.93),
    vec(-19.09 , -870.16 , 49.44))
    BlackListed=""
    #+"models/weapons/fortnite/w_siegebreaker.mdl"#Fortnite Scar
    +""
    WhiteListed=""
    +""
    +""
    E=entity()
    if(E["Parent",entity]!=noentity()){
        EC=E["Parent",entity]
        timer("Corners",0)
    }else{
        timer("Search",1000)
    }
}elseif(clk("Corners")){
    if(EC!=noentity()){
        TR=EC["TopLeft",entity]
        BL=EC["BottomRight",entity]
        if(TR!=noentity() && BL!=noentity()){
            print("Boundaries Found")
            timer("Check",2000)
        }else{
            print("Failed To Find Boundaries")
            reset()
        }
        
    }
}elseif(clk("Search")){
    findClearWhiteList()
    findIncludeClass("gmod_wire_expression2")
    findByClass("gmod_wire_expression2")
    local Temp=findClosest(entity():pos())
    if(!Temp["IsGuine",number]) {
        findExcludeEntity(Temp)
        timer("Search",1000)
    }else{
        EC=Temp
        E=entity()
        E["Parent",entity]=EC
        print("E2 has been Paired")
        timer("Corners",0)
    }
}elseif(clk("Check")){
    findClearWhiteList()
    findIncludeClass("player")
    findExcludeModel("models/player/combine_advisor_guard.mdl")
    findInBox(TR:pos(),BL:pos())
    Players=findToArray()
    if(Players:count()>0){
        timer("BlackListCheck",10)
    }
}elseif(clk("BlackListCheck")){
    if(Players:count()>0){
        P=Players:popEntity()
        if(P:model()!="models/player/combine_advisor_guard.mdl"){
            if(WhiteListed==""){
                if(BlackListed:find(P:weapon():model())>0){
                    if(inrange(P:pos(),TR:pos(),BL:pos())){
                        P:teleport(SpawnPos[random(1,3),vector])
                        P:setHealth(100)
                    }
                }
            }else{
                if(!(WhiteListed:find(P:weapon():model())>0)){
                    if(inrange(P:pos(),TR:pos(),BL:pos())){
                        P:teleport(SpawnPos[random(1,3),vector])
                        P:setHealth(100)
                    }
                }
            }
        }
        timer("BlackListCheck",0)
    }else{
        timer("Check",1000)
    }
}
